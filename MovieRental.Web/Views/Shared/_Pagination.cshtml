@model PaginationViewModel

@{

    var prevClass = (Model.CurrentPage == 1) ? "disabled" : "pagination-previous";
    var previousPage = Model.GetPreviousPage();

    var nextClass = (Model.CurrentPage == Model.TotalPages) ? "disabled" : "pagination-next";
    var nextPage = Model.GetNextPage();

    var radius = 1;
    var minPage = Model.CurrentPage - radius >= 1 ? Model.CurrentPage - radius : 1;
    var maxPage = minPage + 2 * radius <= Model.TotalPages ? minPage + 2 * radius : Model.TotalPages;

    var prevHref = (Model.CurrentPage == 1) ? "#" : previousPage;
}

@if(Model.TotalPages > 1)
{
    <ul class="pagination">

        <li class="@prevClass">
            <a href="@prevHref"></a>
        </li>


        @for (int i = minPage; i <= maxPage; i++)
        {
            string liPageClass = (Model.CurrentPage == i) ? "current" : "";
            string requestPage = Model.GetPage(i);
            <li class="@liPageClass">
                <a href="@requestPage">@i</a>
            </li>
        }


        <li class="@nextClass">
            <a href="@nextPage" ></a>
        </li>
    </ul>
}

